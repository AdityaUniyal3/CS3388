# README

## Overview

 **Assignment 5**

- **Marching Cubes** for generating triangle meshes from scalar fields.
- **Per‐triangle normals** for lighting.
- **Exporting** the mesh in ASCII **PLY** format.
- **Phong‐like shading** in OpenGL (ambient, diffuse, specular).
- **Camera controls** to rotate around the origin (mouse drag) and zoom in/out (arrow keys).

We demonstrate two scalar fields:
1. \(x^2 - y^2 - z^2 - z\) at isovalue = \(-1.5\)
2. \(y - \sin(x)\cos(z)\) at isovalue = \(0\)

## File Descriptions

- **`main.cpp`**  
  - Sets up OpenGL context, initializes shaders, calls Marching Cubes, and runs the main loop.

- **`marching_cubes.cpp / .h`**  
  - Implements the **Marching Cubes** algorithm, returning a flat list of \(\{x, y, z\}\) vertices.

- **`compute_normals.cpp / .h`**  
  - Computes **per‐triangle normals** by cross product of triangle edges.

- **`write_ply.cpp / .h`**  
  - Writes an **ASCII PLY** file with \(\{x, y, z, nx, ny, nz\}\) per vertex, and faces defined by triplets of unique vertex indices.

- **`camera.cpp / .h`**  
  - Spherical‐coordinate camera controlled by mouse drag and arrow keys for zoom.

- **`shader_utils.cpp / .h` + `shaderSource.hpp`**  
  - Contains GLSL vertex & fragment shader source code and code to compile/link them.

- **`CS3388-Assignment5.pdf`**  
  - The original assignment description (not needed for compilation).

## How to Build (Using Make)

1. Ensure you have the necessary dependencies installed:
   - **OpenGL** development libraries
   - **GLEW**
   - **GLFW**
   - **GLM** 
   - A C++ compiler (g++ or clang++) supporting C++11 or newer.

2. **Build**:
   use `make` to compile the program files
   The default `Makefile` should produce an executable, named `assignment5` within a bin folder. 

## How to Run
./assignment5 [width] [height] [stepsize]

- **`width`** and **`height`** default to **800 × 600** if omitted.
- **`stepsize`** (default 0.3) controls the grid spacing for Marching Cubes. Smaller steps produce finer meshes but take longer.

## Controls

- **Left Mouse + Drag**: Rotate the camera around the origin in spherical coordinates.  
- **Up / Down Arrow**: Zoom in and out (adjust camera radius `r`).  
- **Esc**: Exit the application.

## Output Files

- **`output_mesh.ply`**  
  - The ASCII PLY file generated by the program, containing the vertices (with normals) and faces.  
  - Each face is defined by three unique vertices (no vertex sharing, as per assignment instructions).

## Known Bugs / Notes

- The surface appears **faceted** because **no vertex sharing** is allowed, so each triangle has its own normals. This is **expected** as per the assignment specs.
- You may need to **tweak `stepsize`** or your **camera angles** to reproduce the same look as the assignment’s figures.
- You can also **adjust the uniform `LightDir`** to change the lighting orientation.

