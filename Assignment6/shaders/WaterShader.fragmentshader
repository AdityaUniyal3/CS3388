#version 400
in vec3 position_gs;
in vec3 normal_gs;
in vec2 uv_gs;
out vec4 color;

uniform sampler2D waterTex;
uniform vec3 lightPos;
uniform vec3 eyePos;

void main() {
    // Phong lighting components
    vec3 lightDir = normalize(lightPos - position_gs);
    vec3 viewDir = normalize(eyePos - position_gs);
    vec3 reflectDir = reflect(-lightDir, normal_gs);
    
    // Light calculations
    float ambient = 0.1;
    float diffuse = max(dot(normal_gs, lightDir), 0.0);
    float specular = pow(max(dot(viewDir, reflectDir), 0.0), 32.0);
    
    // Combine with texture
    vec3 texColor = texture(waterTex, uv_gs).rgb;
    vec3 finalColor = (ambient + diffuse) * texColor + specular * vec3(0.8);
    
    color = vec4(finalColor, 1.0);
}